修改底下html，支持多個文件上傳，多個文件檔由檔名小到大處理，合併畫圖
<!-- 
  Copyright © [2023] [Dustin_Chen]. All rights reserved.
  Author: Dustin_Chen
  Email:  Dustin_Chen@compal.com or chuhpsdustin@gmail.com
-->

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>parse_cu_draw_upload_filter</title>
    <style>
        body {
            line-height: 1.2;
            font-size: 14px;
            font-family: Roboto, sans-serif;
            white-space: nowrap; /* Prevent automatic line breaks */
            overflow-x: auto; /* Enable horizontal scrollbar */
        }

        .gnb-stats {
            color: black;
            font-size: 12px;
        }

        .udp-dl-tx {
            color: blue;
            font-size: 12px;
        }

        .udp-ul-tx {
            color: red;
            font-size: 12px;
        }

        #chartContainer {
            width: 100%;
            height: 400px;
            margin-bottom: 40px;
        }

        canvas {
            max-width: 100%;
            height: auto;
        }

        #filterContainer {
            margin-top: 20px;
        }

        input[type="number"] {
            width: 100px;
        }

        button {
            margin-left: 10px;
            padding: 5px 10px;
            background-color: #007BFF;
            color: white;
            border: none;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let chart1 = null;  // Store the UDP-UL-Tx chart instance
        let chart2 = null;  // Store the UDP-DL-Tx chart instance

        let parsedData = {};

        // Function to handle the file upload
        function handleFileUpload(event) {
            const file = event.target.files[0];
            if (file) {
                const reader = new FileReader();

                reader.onload = function(e) {
                    const fileContent = e.target.result;
                    parseContent(fileContent);
                };

                reader.onerror = function(e) {
                    alert("Failed to read file!");
                };

                reader.readAsText(file);  // Read the file as text
            }
        }

        function parseContent(fileContent) {
            var lines = fileContent.split("\n");
            var timestampsUl = [];
            var udpUlTxValues = [];
            var timestampsDl = [];
            var udpDlTxValues = [];
            var seenTimestamps = new Set(); // Set to track seen timestamps

            for (var i = 0; i < lines.length; i++) {
                var line = lines[i];

                if (line.includes("GNB MGR STATISTICS")) {
                    var timestampMatch = line.match(/\[(.*?)\]/); // Extract the timestamp
                    if (timestampMatch) {
                        var timestamp = timestampMatch[1];

                        if (seenTimestamps.has(timestamp)) {
                            continue;
                        }

                        timestampsUl.push(timestamp);
                        timestampsDl.push(timestamp);
                        seenTimestamps.add(timestamp);
                    }
                } else if (line.includes("UDP-UL-Tx")) {
                    var udpUlTxValue = line.match(/\(.*?(\d+(\.\d+)?)\s*Mbps\)/);
                    if (udpUlTxValue) {
                        udpUlTxValues.push(parseFloat(udpUlTxValue[1]));
                    }
                } else if (line.includes("UDP-DL-Tx")) {
                    var udpDlTxValue = line.match(/\(.*?(\d+(\.\d+)?)\s*Mbps\)/);
                    if (udpDlTxValue) {
                        udpDlTxValues.push(parseFloat(udpDlTxValue[1]));
                    }
                }
            }

            // Store parsed data for later use
            parsedData = {
                timestampsUl: timestampsUl,
                udpUlTxValues: udpUlTxValues,
                timestampsDl: timestampsDl,
                udpDlTxValues: udpDlTxValues
            };

            // After parsing, apply filters
            applyFilters();
        }

        function applyFilters() {
            const ulFilterValue = parseFloat(document.getElementById('ulFilter').value);
            const dlFilterValue = parseFloat(document.getElementById('dlFilter').value);

            let filteredUlData = {
                timestampsUl: [],
                udpUlTxValues: []
            };

            let filteredDlData = {
                timestampsDl: [],
                udpDlTxValues: []
            };

            // UL filter application
            if (!isNaN(ulFilterValue)) {
                for (let i = 0; i < parsedData.udpUlTxValues.length; i++) {
                    if (parsedData.udpUlTxValues[i] > ulFilterValue) {
                        filteredUlData.timestampsUl.push(parsedData.timestampsUl[i]);
                        filteredUlData.udpUlTxValues.push(parsedData.udpUlTxValues[i]);
                    }
                }
            } else {
                // If no filter, use the original data
                filteredUlData = {timestampsUl: parsedData.timestampsUl, udpUlTxValues: parsedData.udpUlTxValues};
            }

            // DL filter application
            if (!isNaN(dlFilterValue)) {
                for (let i = 0; i < parsedData.udpDlTxValues.length; i++) {
                    if (parsedData.udpDlTxValues[i] > dlFilterValue) {
                        filteredDlData.timestampsDl.push(parsedData.timestampsDl[i]);
                        filteredDlData.udpDlTxValues.push(parsedData.udpDlTxValues[i]);
                    }
                }
            } else {
                // If no filter, use the original data
                filteredDlData = {timestampsDl: parsedData.timestampsDl, udpDlTxValues: parsedData.udpDlTxValues};
            }

            // Ensure filtered data is not empty
            if (filteredUlData.timestampsUl.length > 0 && filteredUlData.udpUlTxValues.length > 0 &&
                filteredDlData.timestampsDl.length > 0 && filteredDlData.udpDlTxValues.length > 0) {
                drawCharts(filteredUlData, filteredDlData);
            } else {
                alert("Filtered data is empty, please check filter values!");
            }
        }

        function drawCharts(filteredUlData, filteredDlData) {
            clearCharts();  // Clear previous charts

            // Draw UDP UL chart
            drawChart(filteredUlData.timestampsUl, filteredUlData.udpUlTxValues, 'chart1', 'UDP-UL-Tx Throughput (Mbps)', 'red');
            
            // Draw UDP DL chart
            drawChart(filteredDlData.timestampsDl, filteredDlData.udpDlTxValues, 'chart2', 'UDP-DL-Tx Throughput (Mbps)', 'blue');
        }

        function drawChart(timestamps, dataValues, chartId, label, borderColor) {
            var ctx = document.getElementById(chartId).getContext('2d');

            // Destroy previous chart if it exists
            if (chartId === 'chart1' && chart1) {
                chart1.destroy();
            } else if (chartId === 'chart2' && chart2) {
                chart2.destroy();
            }

            // Create new chart
            let chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: timestamps, // Timestamps
                    datasets: [{
                        label: label,
                        data: dataValues, // Data values (UL or DL)
                        borderColor: borderColor,
                        backgroundColor: borderColor === 'red' ? 'rgba(255, 99, 132, 0.2)' : 'rgba(54, 162, 235, 0.2)',
                        fill: false,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Timestamp (GNB MGR STATISTICS)'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: label
                            },
                            beginAtZero: false
                        }
                    }
                }
            });

            // Store the chart instance
            if (chartId === 'chart1') {
                chart1 = chart;
            } else if (chartId === 'chart2') {
                chart2 = chart;
            }
        }

        function clearCharts() {
            // Destroy charts if they exist
            if (chart1) {
                chart1.destroy();
            }
            if (chart2) {
                chart2.destroy();
            }

            // Clear the chart container
            var chartContainer = document.getElementById("chartContainer");
            chartContainer.innerHTML = '';
            chartContainer.innerHTML = '<canvas id="chart1"></canvas><canvas id="chart2"></canvas>';
        }
    </script>
</head>

<body>
    <h2>parse_cu_draw_upload_filter</h2>

    <p style="margin: 0;">Author: Dustin_Chen, email: <a href="mailto:Dustin_Chen@compal.com"
            style="line-height: 1;">Dustin_Chen@compal.com</a> or <a href="mailto:chuhpsdustin@gmail.com"
            style="line-height: 1;">chuhpsdustin@gmail.com</a></p>

    <div>
        <br>
        <label for="fileInput">● Please upload the "cu_stats_XXX.txt" file to parse:</label><br>
        <input type="file" id="fileInput" accept=".txt" onchange="handleFileUpload(event)"><br>
    </div>

    <div id="filterContainer">
        <label for="ulFilter">UL Filter (Mbps): </label>
        <input type="number" id="ulFilter" placeholder="Enter value">
        <label for="dlFilter">DL Filter (Mbps): </label>
        <input type="number" id="dlFilter" placeholder="Enter value">
        <button onclick="applyFilters()">Update</button>
    </div>

    <h4>Output Charts:</h4>
    <div id="chartContainer">
        <canvas id="chart1"></canvas>
        <canvas id="chart2"></canvas>
    </div>
</body>

</html>
